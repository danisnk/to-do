import "./App.css";
import { useEffect, useState } from "react";
import "./Animation.css"

function App() {
  const [todo, setTodo] = useState("");
  const [activeTodo, setactiveTodo] = useState(
    localStorage.getItem("activetodo")
      ? JSON.parse(localStorage.getItem("activetodo"))
      : []
  );
  const [deletedTodo, setdeletedTodo] = useState(
    localStorage.getItem("deletedTodo")
      ? JSON.parse(localStorage.getItem("deletedTodo"))
      : []
  );

  const [time, setTime] = useState(new Date());

  useEffect(() => {
    const timer = setTimeout(() => setTime(new Date()), 1000);
    return () => clearTimeout(timer);
  }, [time])

  useEffect(() => {
    localStorage.setItem("activetodo", JSON.stringify(activeTodo));
    localStorage.setItem("deletedTodo", JSON.stringify(deletedTodo));
  }, [activeTodo, deletedTodo]);

  const handleInputSubmit = (e) => {
    e.preventDefault();
    if (todo !== "") {
      setactiveTodo([
        ...activeTodo,
        { id: Date.now(), text: todo, status: false },
      ]);
    }
    setTodo("");
  };

  const handleRemove = (data) => {
    setdeletedTodo([...deletedTodo, data]);
    var items = activeTodo.filter((item) => {
      return item !== data;
    });
    setactiveTodo(items);
  };

  return (
    <div className="main-container">

<svg width="100%" height="100%" viewBox="0 0 1500 1500" version="1.1" xmlns="http://www.w3.org/2000/svg">
<g id="#53cbcf8b">
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 608.50 707.64 C 637.97 703.35 669.00 716.51 686.59 740.51 C 702.72 761.74 707.80 790.41 701.35 816.12 C 695.42 841.55 677.19 863.93 652.99 874.04 C 622.74 886.86 584.74 881.19 561.01 857.96 C 540.58 838.68 531.94 808.97 535.67 781.48 C 538.19 761.69 547.82 742.86 562.51 729.35 C 575.08 717.56 591.40 709.81 608.50 707.64 M 610.12 717.26 C 594.29 719.32 579.21 726.63 567.84 737.83 C 553.79 751.39 545.40 770.56 544.75 790.06 C 543.80 809.13 549.22 828.77 561.22 843.80 C 571.07 856.39 585.41 865.25 600.97 868.81 C 625.53 874.82 653.28 868.28 671.33 850.23 C 693.08 829.34 699.60 795.37 689.81 767.23 C 683.44 748.71 669.66 732.79 652.00 724.23 C 639.13 717.76 624.36 715.58 610.12 717.26 Z" class="svg-elem-1"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 1019.67 707.72 C 1037.08 704.84 1055.74 709.38 1069.51 720.54 C 1084.29 732.18 1093.04 750.02 1096.65 768.20 C 1098.96 778.97 1099.29 790.02 1099.01 801.00 C 1098.03 821.57 1093.00 843.02 1079.32 859.01 C 1065.61 875.46 1043.06 882.85 1022.09 880.31 C 1005.11 878.76 988.78 870.17 978.44 856.52 C 965.61 839.95 961.14 818.48 960.76 797.93 C 960.04 775.86 964.28 752.76 977.23 734.44 C 987.07 720.37 1002.59 710.19 1019.67 707.72 M 1018.64 717.79 C 1003.61 720.68 990.38 730.55 982.59 743.63 C 971.89 761.30 969.52 782.69 970.70 802.96 C 971.52 817.96 974.70 833.29 982.80 846.15 C 990.71 859.14 1004.63 868.07 1019.67 870.13 C 1038.85 873.47 1060.43 867.50 1072.83 851.90 C 1086.54 834.95 1089.62 812.13 1089.27 790.99 C 1088.98 770.29 1083.69 748.35 1068.95 733.04 C 1056.29 719.64 1036.58 714.03 1018.64 717.79 Z" class="svg-elem-2"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 400.30 714.97 C 400.22 711.99 402.94 709.38 405.94 709.78 C 442.62 709.74 479.29 709.72 515.96 709.79 C 518.95 709.44 521.52 712.11 521.40 715.05 C 521.46 725.34 521.49 735.64 521.38 745.93 C 521.58 748.86 518.92 751.47 515.99 751.08 C 505.29 751.11 494.60 751.07 483.90 751.09 C 483.85 791.41 483.92 831.73 483.87 872.05 C 484.16 875.30 481.38 878.18 478.11 877.96 C 466.72 878.01 455.32 877.99 443.93 877.97 C 441.09 878.22 437.98 876.14 438.00 873.13 C 437.98 832.44 438.03 791.76 437.98 751.08 C 426.96 751.07 415.93 751.15 404.91 751.04 C 402.27 751.10 400.24 748.51 400.30 745.99 C 400.22 735.65 400.21 725.30 400.30 714.97 M 410.11 719.43 C 409.90 726.74 410.03 734.05 410.02 741.37 C 420.69 741.39 431.37 741.32 442.05 741.39 C 445.12 741.18 447.89 743.87 447.73 746.96 C 447.81 787.31 447.74 827.65 447.77 868.00 C 456.51 868.03 465.25 868.01 473.99 868.01 C 474.01 827.64 473.99 787.26 474.00 746.89 C 473.82 744.01 476.19 741.39 479.11 741.43 C 489.90 741.32 500.71 741.30 511.50 741.46 C 511.98 734.15 511.62 726.82 511.68 719.50 C 477.82 719.44 443.96 719.59 410.11 719.43 Z" class="svg-elem-3"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 812.23 711.21 C 814.00 709.38 816.71 709.83 819.01 709.73 C 833.67 709.84 848.34 709.61 863.00 709.85 C 888.78 709.95 914.33 722.52 929.73 743.28 C 943.29 761.07 948.55 784.45 945.31 806.45 C 942.67 826.32 932.40 845.10 916.97 857.92 C 902.06 870.63 882.58 877.47 863.07 877.89 C 847.70 878.10 832.34 877.93 816.98 877.98 C 814.48 878.26 812.39 876.81 810.96 874.91 C 810.64 822.61 810.94 770.29 810.81 717.99 C 810.95 715.70 810.35 712.95 812.23 711.21 M 820.58 719.55 C 820.45 768.98 820.71 818.42 820.46 867.85 C 828.63 868.23 836.81 867.91 844.99 868.02 C 856.36 867.82 867.90 868.87 879.05 866.11 C 898.25 861.90 915.64 849.76 925.79 832.88 C 940.31 808.95 940.03 776.70 924.76 753.18 C 911.76 732.79 888.11 720.09 864.02 719.64 C 849.55 719.35 835.06 719.51 820.58 719.55 Z" class="svg-elem-4"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 1022.37 739.55 C 1029.69 737.64 1037.95 738.40 1044.31 742.72 C 1050.91 747.06 1055.11 754.18 1057.78 761.46 C 1061.68 772.17 1062.67 783.68 1062.74 795.01 C 1062.46 806.82 1061.41 818.92 1056.71 829.90 C 1053.96 836.23 1049.73 842.23 1043.59 845.65 C 1033.04 851.53 1018.47 849.87 1010.11 840.93 C 1003.92 834.40 1000.84 825.61 999.08 816.95 C 996.85 804.79 996.33 792.28 997.83 780.00 C 998.96 769.90 1001.40 759.61 1007.14 751.07 C 1010.70 745.64 1016.07 741.31 1022.37 739.55 M 1025.68 748.90 C 1018.73 750.72 1014.15 757.07 1011.60 763.44 C 1006.49 776.29 1006.68 790.40 1007.13 804.00 C 1008.12 814.06 1009.49 824.90 1016.09 833.02 C 1022.33 840.76 1035.38 841.49 1042.34 834.34 C 1047.66 829.07 1049.90 821.58 1051.27 814.41 C 1053.52 801.14 1053.60 787.48 1051.25 774.22 C 1049.73 766.70 1047.32 758.87 1041.74 753.32 C 1037.69 749.13 1031.31 747.26 1025.68 748.90 Z" class="svg-elem-5"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 609.50 742.63 C 621.01 740.45 633.65 741.78 643.58 748.36 C 653.33 754.62 659.68 765.11 662.73 776.11 C 666.61 790.43 665.77 806.13 659.84 819.77 C 655.61 829.51 647.98 837.99 638.12 842.18 C 628.02 846.44 616.50 846.82 605.96 844.06 C 596.21 841.50 587.60 835.06 582.35 826.45 C 574.71 814.23 572.76 799.24 574.28 785.12 C 576.03 772.18 581.65 759.21 591.98 750.86 C 597.04 746.73 603.12 743.93 609.50 742.63 M 613.73 751.84 C 603.78 753.04 594.86 759.38 589.94 768.02 C 583.28 779.38 582.58 793.18 584.63 805.91 C 586.40 815.52 591.07 825.17 599.49 830.60 C 608.12 836.16 619.15 837.19 629.01 834.93 C 637.67 833.02 645.16 827.05 649.38 819.31 C 654.97 809.21 656.00 797.24 654.85 785.94 C 653.53 776.21 649.75 766.39 642.31 759.72 C 634.77 752.64 623.75 750.32 613.73 751.84 Z" class="svg-elem-6"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 849.41 742.68 C 851.72 741.43 854.49 742.16 857.02 741.97 C 870.88 741.82 884.90 747.43 894.11 757.94 C 910.77 776.48 911.58 806.79 896.65 826.59 C 888.91 836.95 876.76 843.84 863.90 845.19 C 859.67 845.59 855.38 845.92 851.14 845.53 C 848.46 845.30 846.54 842.57 846.94 839.98 C 846.96 808.98 846.92 777.97 846.96 746.96 C 846.80 745.19 848.00 743.60 849.41 742.68 M 856.69 751.86 C 856.68 779.90 856.63 807.95 856.71 835.99 C 867.04 835.83 877.59 832.49 885.05 825.12 C 900.91 809.57 901.70 781.50 887.20 764.80 C 879.71 756.09 868.09 751.43 856.69 751.86 Z" class="svg-elem-7"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 723.43 798.56 C 724.77 797.67 726.45 797.97 727.99 797.89 C 748.00 797.98 768.02 797.81 788.04 797.97 C 790.98 798.07 792.70 801.28 792.47 803.98 C 792.43 813.29 792.57 822.62 792.40 831.93 C 792.52 834.82 789.88 837.17 787.07 837.00 C 766.70 836.99 746.32 837.01 725.95 836.99 C 723.32 837.06 720.80 834.69 720.97 832.02 C 720.95 822.34 720.95 812.66 720.97 802.99 C 720.79 801.15 721.89 799.45 723.43 798.56 M 730.71 807.71 C 730.68 814.17 730.66 820.64 730.72 827.11 C 748.08 827.08 765.45 827.32 782.80 826.98 C 782.74 820.61 782.68 814.23 782.83 807.86 C 765.47 807.41 748.08 807.71 730.71 807.71 Z" class="svg-elem-8"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 731.67 963.61 C 739.01 954.65 749.82 949.00 760.98 946.37 C 765.35 945.43 771.02 945.12 773.85 949.32 C 777.94 954.66 774.79 961.61 770.86 966.04 C 768.97 966.71 766.84 963.94 768.27 962.37 C 770.26 959.30 772.96 955.99 772.09 952.07 C 771.93 950.10 769.77 948.94 767.99 949.26 C 755.80 950.75 743.98 956.35 735.71 965.51 C 733.56 967.83 731.71 971.46 733.63 974.47 C 735.81 977.37 739.65 978.07 742.95 979.00 C 748.29 980.36 753.65 981.65 759.01 982.96 C 763.40 980.14 767.86 977.15 772.98 975.87 C 775.64 975.14 778.57 975.87 781.06 974.47 C 783.19 973.24 785.62 974.33 787.35 975.76 C 789.06 975.67 790.94 976.12 791.40 978.06 C 791.13 980.23 790.45 982.32 789.94 984.45 C 796.67 982.24 803.29 977.99 806.55 971.50 C 807.64 969.37 810.69 972.19 809.93 973.88 C 808.80 976.31 807.32 978.56 805.97 980.89 C 808.11 980.93 810.19 981.45 812.11 982.42 C 813.81 978.99 815.91 975.06 819.91 974.00 C 821.89 973.47 823.56 974.73 825.12 975.76 C 826.73 975.70 828.93 976.04 829.10 978.06 C 828.95 980.23 828.19 982.29 827.84 984.44 C 832.93 982.80 837.76 979.84 841.25 975.77 C 842.91 975.79 843.95 977.00 844.52 978.49 C 847.52 976.65 850.74 975.21 854.05 974.04 C 858.24 975.87 854.79 979.95 853.57 982.61 C 858.14 980.79 862.42 978.31 867.06 976.68 C 868.47 976.22 869.65 978.68 868.09 979.14 C 863.76 981.43 859.56 983.96 855.44 986.61 C 853.63 987.79 850.69 989.02 849.05 986.92 C 847.19 985.15 848.62 982.80 849.03 980.79 C 845.41 982.71 842.76 985.86 839.78 988.58 C 837.03 988.97 836.13 985.28 837.63 983.36 C 834.84 985.62 831.67 988.47 827.81 987.99 C 825.03 987.26 823.77 984.29 823.82 981.65 C 820.61 983.90 817.80 986.96 814.01 988.20 C 811.45 988.31 811.77 984.00 809.01 984.55 C 808.48 984.63 807.42 984.79 806.89 984.88 C 809.49 992.60 807.65 1001.73 802.85 1008.26 C 798.47 1007.14 796.81 1002.07 797.01 998.02 C 797.52 992.89 798.72 987.81 800.64 983.02 C 797.39 985.15 794.19 988.56 789.95 987.99 C 787.17 987.21 786.17 984.29 786.08 981.70 C 782.50 983.80 779.56 988.15 775.13 988.03 C 772.04 985.71 774.86 981.83 775.96 979.16 C 771.54 980.45 767.39 982.51 763.59 985.10 C 764.49 986.66 765.87 988.67 764.37 990.37 C 761.11 994.49 756.06 996.93 751.04 998.15 C 749.18 998.88 746.85 997.00 747.42 995.07 C 748.12 990.53 752.44 988.13 755.55 985.29 C 748.01 983.20 739.66 982.55 733.19 977.79 C 728.72 974.51 728.01 967.76 731.67 963.61 M 803.16 987.91 C 801.47 993.01 800.54 998.36 800.55 1003.75 C 804.27 998.67 804.55 991.96 804.60 985.90 C 803.83 986.36 803.35 987.03 803.16 987.91 Z" class="svg-elem-9"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 642.02 959.19 C 651.23 953.03 661.96 948.69 673.10 948.09 C 678.71 947.88 685.01 952.83 682.88 958.91 C 679.51 966.57 671.91 971.53 664.43 974.66 C 664.39 976.53 667.33 977.22 667.90 979.12 C 670.95 984.48 666.38 990.18 661.85 992.85 C 656.25 996.45 648.39 1000.10 642.22 995.75 C 642.00 995.10 641.56 993.78 641.34 993.13 C 645.14 994.09 649.34 994.72 652.96 992.77 C 658.05 990.26 664.47 987.30 665.44 981.03 C 664.66 974.19 654.08 980.11 653.43 973.61 C 662.00 971.83 670.47 968.07 676.26 961.30 C 677.96 959.23 679.93 956.85 679.77 954.02 C 677.81 950.67 673.09 951.89 669.90 952.04 C 660.03 954.08 650.37 958.04 642.45 964.37 C 640.17 966.05 638.71 968.52 637.89 971.21 C 636.72 970.90 634.73 970.48 634.90 968.90 C 634.94 964.54 638.74 961.48 642.02 959.19 Z" class="svg-elem-10"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 654.14 961.10 C 655.16 958.04 659.38 961.70 657.59 963.66 C 652.02 972.54 649.32 982.92 648.96 993.34 C 647.55 993.09 645.93 992.49 645.61 990.92 C 645.56 980.44 648.72 970.04 654.14 961.10 Z" class="svg-elem-11"></path>
<path fill="#53cbcf" stroke="#53cbcf" stroke-width="0.09375" opacity="0.55" d=" M 676.86 983.14 C 682.99 980.34 688.05 975.77 693.02 971.32 C 694.02 972.19 696.07 973.23 695.35 974.90 C 694.91 977.81 693.22 980.32 692.49 983.12 C 695.39 980.64 698.71 978.72 702.12 977.06 C 703.47 976.02 706.09 977.05 705.07 979.00 C 699.19 982.95 693.60 987.38 688.69 992.48 C 685.24 999.29 681.14 1005.73 676.65 1011.90 C 675.44 1012.79 674.29 1011.43 673.70 1010.53 C 672.26 1008.27 673.20 1005.49 674.12 1003.24 C 676.18 998.87 679.65 995.40 682.95 991.96 C 686.51 988.85 687.56 984.01 689.53 979.93 C 685.13 983.60 678.61 989.32 672.86 984.90 C 672.74 980.82 674.36 976.91 677.00 973.86 C 677.94 974.71 680.03 975.42 679.76 977.02 C 678.77 979.05 677.45 980.92 676.86 983.14 Z" class="svg-elem-12"></path>
</g>
</svg>


    <div className="App">
      
      <div className="activeTodos todos_section">
        <p className="title">
          <i class="far fa-calendar-alt"></i>
          {today()}, {todayDate()} {time.toLocaleTimeString()}
        </p>
        <form onSubmit={handleInputSubmit}>
          <input
            type="text"
            className="activeTodosInput"
            placeholder="🖊️ To-do..."
            onChange={(e) => setTodo(e.target.value)}
            value={todo}
            autoFocus
          />
        </form>
        <div className="todos"> 
         {activeTodo.map((data, key) => { 
            if (!data.status) {
              return (
                <div key={key} className="todo">
                  <input
                    type="checkbox"
                    name="checkbox"
                    className="checkbox"
                    checked={data.status}
                    onChange={(e) => {
                      setactiveTodo(
                        activeTodo.filter((obj) => {
                          if (obj.id === data.id) {
                            obj.status = e.target.checked;
                          }
                          return obj;
                        })
                      );
                    }}
                  />
                  <span className="todoText">{data.text}</span>
                  <span
                    onClick={() => {
                      window.confirm("Removed items can't be restored") &&
                        handleRemove(data);
                    }}
                    className="closeButton"
                  >
                    <i class="fas fa-minus-circle"></i>
                  </span>
                </div>
              );
            }
          })}
        </div>
      </div>

      <div className="completedTodos todos_section">
        <p className="title">
          <i class="fas fa-check-circle"></i> Done
        </p>
        <div className="todos">
          {activeTodo.map((data, key) => {
            if (data.status) {
              return (
                <div key={key} className="todo">
                  <input
                    type="checkbox"
                    name="checkbox"
                    className="checkbox"
                    checked={data.status}
                    onChange={(e) => {
                      setactiveTodo(
                        activeTodo.filter((obj) => {
                          if (obj.id === data.id) {
                            obj.status = e.target.checked;
                          }
                          return obj;
                        })
                      );
                    }}
                  />
                  <span className="todoText">{data.text}</span>
                  <span
                    onClick={() => {
                      let isdelete = window.confirm(
                        "deleted items can't be restored"
                      );
                      if (isdelete) {
                        var items = activeTodo.filter((item) => {
                          return item !== data;
                        });
                        setactiveTodo(items);
                      }
                    }}
                    className="closeButton delete"
                  >
                    Delete
                  </span>
                </div>
              );
            }
            return null;
          })}
        </div>
      </div>
      <div className="deletedTodos todos_section">
        <p className="title">
          <i class="fas fa-trash"></i> Removed
        </p>
        <div className="todos">
          {deletedTodo.map((data, key) => {
            return (
              <div className="todo">
                <span className="todoText">{data.text}</span>
                <span
                  onClick={() => {
                    let isdelete = window.confirm(
                      "deleted items can't be restored"
                    );
                    if (isdelete) {
                      var items = deletedTodo.filter((item) => {
                        return item !== data;
                      });
                      setdeletedTodo(items);
                    }
                  }}
                  className="closeButton delete"
                >
                  <i class="far fa-trash-alt"></i>
                </span>
              </div>
            );
          })}
        </div>
      </div>
      
    </div>
    </div>
  );
}

export default App;

function today() {
  var a = new Date();
  var weekdays = new Array(7);
  weekdays[0] = "Sunday";
  weekdays[1] = "Monday";
  weekdays[2] = "Tuesday";
  weekdays[3] = "Wednesday";
  weekdays[4] = "Thursday";
  weekdays[5] = "Friday";
  weekdays[6] = "Saturday";
  var r = weekdays[a.getDay()];
  return r;
}

function todayDate() {
  var today = new Date();
  var dd = today.getDate();

  var mm = today.getMonth() + 1;
  var yyyy = today.getFullYear();
  if (dd < 10) {
    dd = "0" + dd;
  }

  if (mm < 10) {
    mm = "0" + mm;
  }
  today = dd + "/" + mm + "/" + yyyy;
  return today;
}
